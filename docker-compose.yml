version: '3'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    restart: unless-stopped
    links:
      - db:db
      - redis:redis
    volumes:
      - web_data:/opt/project
    depends_on:
      - db
      - pgbouncer
      - redis

  db:
    image: postgres:14.2-alpine
    ports:
      - 5432:5432
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  pgbouncer:  
    image: edoburu/pgbouncer:1.22.0-p0
    ports:
      - 6432:5432
    env_file: 
      - .env
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      POOL_MODE: transaction
      MAX_DB_CONNECTIONS: 100
      DEFAULT_POOL_SIZE: 50
      MAX_CLIENT_CONN: 200
      AUTH_TYPE: scram-sha-256
    restart: unless-stopped
    depends_on:
      - db

  redis:
    image: redis:7.2.4-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data

  node_exporter:
    image: prom/node-exporter:v1.7.0
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9200:9100
    networks:
      - monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    depends_on:
      - web

  prometheus:
    image: prom/prometheus:v2.51.2
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring
    depends_on:
      - web
      - node_exporter

  grafana:
    image: grafana/grafana:10.4.2
    # user: "104"
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    # env_file:
    #   - ./grafana/config.monitoring
    # environment:
    #   - GF_SECURITY_ADMIN_USER=admin
    #   - GF_SECURITY_ADMIN_PASSWORD=admin
    #   - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  monitoring:
    driver: bridge

volumes:
  web_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
